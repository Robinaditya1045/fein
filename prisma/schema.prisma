// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  accountAddress String @unique
  verificationStatus VerificationStatus @default(UnVerified)
  isOnboarded Boolean @default(false)
  userInfo UserInfo?
  createdAt DateTime @default(now())
  songs Song[]
  followers Follower[] @relation("UserFollowed")
  following Follower[] @relation("UserFollowing")
  likes Like[]
  MintedTokens MintedTokens[]
  boughtTokens boughtTokens[]
}

model UserInfo {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  name String
  instaAccUrl String?
}

model Song {
  id Int @id @default(autoincrement())
  userId Int
  name String
  thumbnail String
  songCid String
  length String
  totalListeningHrs BigInt
  user User @relation(fields: [userId], references: [id])
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  userId Int
  songId Int
  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])

  @@unique([userId, songId]) // Prevent a user from liking the same song more than once
}

model Follower {
  id Int @id @default(autoincrement())
  followingId Int
  followedId Int
  following User @relation("UserFollowing", fields: [followingId], references: [id])
  followed User @relation("UserFollowed", fields: [followedId], references: [id])
}

enum VerificationStatus {
  Verified
  UnVerified
  Processing
}

model MintedTokens {
  id Int @id @default(autoincrement())
  tokenId String @unique
  tokenThumbail String
  tokenName String
  tokenDesc String
  tokenPrice Int
  avaibleToken Int
  user User @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  boughtTokens boughtTokens[]
}

model boughtTokens {
  id Int @id @default(autoincrement())
  tokenId String
  userId Int
  tokensBought Int
  user User @relation(fields: [userId], references: [id])
  mintedTokens MintedTokens @relation(fields: [tokenId], references: [tokenId])
  createdAt DateTime @default(now())
}